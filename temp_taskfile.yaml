version: '3'

vars:
  PROJECT_NAME: fitlog
  PYTHON_FILES: "fitlog tests"
  RUFF_CONFIG: "pyproject.toml"

tasks:
  default:
    desc: "Default task - show available tasks"
    cmds:
      - task --list

  # Environment setup
  setup:
    desc: "Initial project setup"
    cmds:
      - uv sync --dev
      - echo "✅ Setup completed"

  # Code quality management
  lint:
    desc: "Run code static analysis"
    cmds:
      - task: ruff-check
      - task: type-check

  fmt:
    desc: "Format code"
    cmds:
      - task: ruff-format
      - task: ruff-fix

  ruff-check:
    desc: "Check code with Ruff"
    cmds:
      - uv run ruff check {{.PYTHON_FILES}}

  ruff-fix:
    desc: "Auto-fix issues with Ruff"
    cmds:
      - uv run ruff check {{.PYTHON_FILES}} --fix

  ruff-format:
    desc: "Format code with Ruff"
    cmds:
      - uv run ruff format {{.PYTHON_FILES}}

  type-check:
    desc: "Run type checking with Ty"
    cmds:
      - uv run ty check {{.PYTHON_FILES}}

  # Test related
  test:
    desc: "Run tests"
    cmds:
      - uv run pytest

  test-cov:
    desc: "Run tests with coverage"
    cmds:
      - uv run pytest --cov={{.PROJECT_NAME}} --cov-report=html --cov-report=term-missing

  test-watch:
    desc: "Watch files and run tests"
    cmds:
      - uv run pytest-watch

  # Application execution
  run:
    desc: "Execute fitlog data fetching"
    cmds:
      - uv run fitlog-fetch

  run-dry:
    desc: "Execute fitlog data fetching in dry run mode"
    cmds:
      - uv run fitlog-fetch --dry-run

  run-days:
    desc: "Execute fitlog data fetching for specified days"
    cmds:
      - uv run fitlog-fetch --days {{.DAYS | default "7"}}

  influx-test:
    desc: "Test InfluxDB connection"
    cmds:
      - uv run fitlog-influx-test

  # Mock data generation
  mock:
    desc: "Generate mock health data for demonstration"
    cmds:
      - uv run fitlog-mock --days {{.DAYS | default "7"}}

  mock-dry:
    desc: "Show mock data without writing to database"
    cmds:
      - uv run fitlog-mock --days {{.DAYS | default "7"}} --dry-run

  # Docker related (Production)
  docker-up:
    desc: "Start production services with Docker Compose"
    cmds:
      - docker compose up -d

  docker-down:
    desc: "Stop production services with Docker Compose"
    cmds:
      - docker compose down

  docker-logs:
    desc: "Show production Docker Compose logs"
    cmds:
      - docker compose logs -f

  docker-status:
    desc: "Check production Docker Compose service status"
    cmds:
      - docker compose ps

  # Docker related (Demo)
  demo-up:
    desc: "Start demo services with automated mock data"
    cmds:
      - docker compose -f compose.demo.yaml up -d

  demo-down:
    desc: "Stop demo services"
    cmds:
      - docker compose -f compose.demo.yaml down

  demo-logs:
    desc: "Show demo Docker Compose logs"
    cmds:
      - docker compose -f compose.demo.yaml logs -f

  demo-status:
    desc: "Check demo Docker Compose service status"
    cmds:
      - docker compose -f compose.demo.yaml ps

  docker-build:
    desc: "Build fitlog Docker image (production)"
    cmds:
      - docker compose build fitlog

  demo-build:
    desc: "Build fitlog Docker image (demo)"
    cmds:
      - docker compose -f compose.demo.yaml build fitlog-demo

  docker-exec:
    desc: "Execute command in production fitlog container"
    cmds:
      - docker compose exec fitlog {{.CMD | default "bash"}}

  demo-exec:
    desc: "Execute command in demo fitlog container"
    cmds:
      - docker compose -f compose.demo.yaml exec fitlog-demo {{.CMD | default "bash"}}

  docker-run-fetch:
    desc: "Run data fetching in production Docker container"
    cmds:
      - docker compose exec fitlog python -m fitlog.fetch

  docker-run-fetch-dry:
    desc: "Run data fetching in production Docker container (dry run)"
    cmds:
      - docker compose exec fitlog python -m fitlog.fetch --dry-run

  docker-run-fetch-days:
    desc: "Run data fetching in production Docker container for specified days"
    cmds:
      - docker compose exec fitlog python -m fitlog.fetch --days {{.DAYS | default "7"}}

  docker-mock:
    desc: "Generate mock data in production Docker container"
    cmds:
      - docker compose exec fitlog python -m fitlog.mock_data --days {{.DAYS | default "7"}}

  docker-mock-dry:
    desc: "Show mock data in production Docker container without writing to database"
    cmds:
      - docker compose exec fitlog python -m fitlog.mock_data --days {{.DAYS | default "7"}} --dry-run

  demo-mock:
    desc: "Generate mock data in demo container"
    cmds:
      - docker compose -f compose.demo.yaml exec fitlog-demo python -m fitlog.mock_data --days {{.DAYS | default "7"}}

  # Development environment management
  clean:
    desc: "Clean temporary files and cache"
    cmds:
      - rm -rf __pycache__
      - rm -rf .pytest_cache
      - rm -rf .coverage
      - rm -rf htmlcov
      - rm -rf dist
      - rm -rf build
      - rm -rf *.egg-info
      - find . -name "*.pyc" -delete
      - find . -name "*.pyo" -delete
      - echo "✅ Cleanup completed"

  install:
    desc: "Install dependencies"
    cmds:
      - uv sync

  install-dev:
    desc: "Install dependencies including dev dependencies"
    cmds:
      - uv sync --dev

  # CI/CD related
  ci:
    desc: "Tasks to run in CI environment"
    cmds:
      - task: lint
      - task: test-cov

  pre-commit:
    desc: "Pre-commit checks"
    cmds:
      - task: fmt
      - task: lint
      - task: test

  # Log related
  logs:
    desc: "Show fitlog logs"
    cmds:
      - tail -f logs/fitlog_$(date +%Y%m%d).log

  logs-all:
    desc: "Show all log files"
    cmds:
      - find logs -name "*.log" -exec echo "=== {} ===" \; -exec cat {} \;

  # Version management
  version:
    desc: "Show current version"
    cmds:
      - echo "Project: {{.PROJECT_NAME}}"
      - uv --version
      - uv run python --version
